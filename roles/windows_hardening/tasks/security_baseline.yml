---
# Security baseline configuration tasks
# NIST 800-171 Controls: 3.4.2, 3.4.6, 3.13.1, 3.13.5, 3.13.8, 3.13.11

- name: Set PowerShell execution policy to RemoteSigned
  ansible.windows.win_powershell:
    script: |
      Set-ExecutionPolicy RemoteSigned -Force -Scope LocalMachine
  tags:
    - nist_3.4.2
    - nist_3.4.6

- name: Enable Windows Firewall for all profiles
  ansible.windows.win_firewall:
    state: enabled
    profiles:
      - Domain
      - Private
      - Public
  tags:
    - nist_3.13.1
    - nist_3.13.5

- name: Configure Windows Firewall logging
  ansible.windows.win_powershell:
    script: |
      Set-NetFirewallProfile -Profile Domain,Public,Private -LogBlocked True -LogMaxSizeKilobytes 4096
  tags:
    - nist_3.13.1

- name: Disable SMBv1 protocol
  ansible.windows.win_feature:
    name: FS-SMB1
    state: absent
  register: smb1_removal
  tags:
    - nist_3.13.8

- name: Configure SMB server to disable SMBv1
  ansible.windows.win_powershell:
    script: |
      Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force
  tags:
    - nist_3.13.8

- name: Disable legacy TLS protocols
  ansible.windows.win_regedit:
    path: "{{ item.path }}"
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: dword
  loop:
    - { path: 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server', name: 'Enabled', data: 0 }
    - { path: 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server', name: 'DisabledByDefault', data: 1 }
    - { path: 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server', name: 'Enabled', data: 0 }
    - { path: 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server', name: 'DisabledByDefault', data: 1 }
  tags:
    - nist_3.13.11

- name: Enable FIPS mode if configured
  ansible.windows.win_regedit:
    path: 'HKLM:\System\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy'
    name: Enabled
    data: 1
    type: dword
  when: windows_hardening_enable_fips | bool
  register: fips_enabled
  tags:
    - nist_3.13.11
    - CAT_I

- name: Disable unnecessary services
  ansible.windows.win_service:
    name: "{{ item }}"
    state: stopped
    start_mode: disabled
  loop: "{{ windows_hardening_services_to_disable }}"
  failed_when: false
  tags:
    - nist_3.4.6
    - nist_3.4.7

- name: Install PowerSTIG module if STIG baseline is enabled
  ansible.windows.win_powershell:
    script: |
      if (-not (Get-Module -ListAvailable -Name 'PowerSTIG')) {
        Install-Module -Name PowerSTIG -Force -SkipPublisherCheck -AllowClobber
      }
  when: windows_hardening_apply_stig | bool
  tags:
    - nist_3.12.1
    - nist_3.12.2

- name: Apply DISA STIG baseline
  ansible.windows.win_powershell:
    script: |
      Import-Module PowerSTIG

      # Backup registry
      $backupPath = "$env:TEMP\PreSTIG_RegistryBackup_$(Get-Date -Format 'yyyyMMdd_HHmmss').reg"
      reg export HKLM $backupPath /y

      # Apply STIG
      $stigPath = "$env:TEMP\STIG_Config"
      if (!(Test-Path $stigPath)) {
        New-Item -ItemType Directory -Path $stigPath -Force | Out-Null
      }

      # Apply configuration based on OS version
      $osVersion = (Get-WmiObject Win32_OperatingSystem).Caption
      if ($osVersion -match "2022") {
        & "$stigPath\WindowsServer2022-MS-3.1.ps1"
      } elseif ($osVersion -match "2019") {
        & "$stigPath\WindowsServer2019-MS-3.1.ps1"
      }
  when: windows_hardening_apply_stig | bool
  register: stig_result
  failed_when: false
  tags:
    - nist_3.12.1
    - nist_3.12.2
    - stig
