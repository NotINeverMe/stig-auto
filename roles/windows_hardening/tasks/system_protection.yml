---
# System and information protection tasks
# NIST 800-171 Controls: 3.14.1, 3.14.2, 3.14.6, 3.14.7, 3.1.19, 3.1.20, 3.4.8, 3.13.16

- name: Configure Windows Defender settings
  ansible.windows.win_powershell:
    script: |
      # Enable all protection features
      Set-MpPreference -DisableRealtimeMonitoring $false
      Set-MpPreference -DisableBehaviorMonitoring $false
      Set-MpPreference -DisableBlockAtFirstSeen $false
      Set-MpPreference -DisableIOAVProtection $false
      Set-MpPreference -DisablePrivacyMode $false
      Set-MpPreference -DisableScriptScanning $false
      Set-MpPreference -DisableArchiveScanning $false

      # Configure cloud protection
      Set-MpPreference -MAPSReporting Advanced
      Set-MpPreference -SubmitSamplesConsent SendAllSamples
      Set-MpPreference -CloudBlockLevel High
      Set-MpPreference -CloudExtendedTimeout 50

      # Enable PUA protection
      Set-MpPreference -PUAProtection Enabled

      # Enable network protection
      Set-MpPreference -EnableNetworkProtection Enabled
  when: windows_hardening_enable_defender | bool
  tags:
    - nist_3.14.1
    - nist_3.14.2
    - CAT_I

- name: Configure Windows Defender scanning schedule
  ansible.windows.win_powershell:
    script: |
      Set-MpPreference -ScanScheduleDay Everyday
      Set-MpPreference -ScanScheduleTime 120  # 2:00 AM
      Set-MpPreference -CheckForSignaturesBeforeRunningScan $true
      Set-MpPreference -SignatureUpdateInterval 1  # Every hour
  when: windows_hardening_enable_defender | bool
  tags:
    - nist_3.14.2

- name: Update Windows Defender signatures
  ansible.windows.win_powershell:
    script: |
      Update-MpSignature -ErrorAction SilentlyContinue
  when: windows_hardening_enable_defender | bool
  failed_when: false
  tags:
    - nist_3.14.2

- name: Install Windows security updates
  ansible.windows.win_updates:
    category_names: "{{ windows_hardening_update_categories }}"
    state: installed
    reboot: false
  when: windows_hardening_install_updates | bool
  register: update_result
  tags:
    - nist_3.14.1

- name: Disable USB storage devices
  ansible.windows.win_regedit:
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\USBSTOR'
    name: Start
    data: 4
    type: dword
  when: windows_hardening_disable_usb_storage | bool
  tags:
    - nist_3.1.19
    - nist_3.1.20

- name: Configure removable storage policies
  ansible.windows.win_regedit:
    path: "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\RemovableStorageDevices\\{{ item }}"
    name: Deny_All
    data: 1
    type: dword
  loop:
    - '{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}'  # Generic removable storage
    - '{53f56307-b6bf-11d0-94f2-00a0c91efb8b}'  # Disk drives
    - '{53f5630a-b6bf-11d0-94f2-00a0c91efb8b}'  # CD/DVD
  when: windows_hardening_block_removable_media | bool
  tags:
    - nist_3.1.19
    - nist_3.1.20

- name: Start Application Identity service for AppLocker
  ansible.windows.win_service:
    name: AppIDSvc
    state: started
    start_mode: auto
  when: windows_hardening_enable_applocker | bool
  tags:
    - nist_3.4.8

- name: Configure basic AppLocker rules
  ansible.windows.win_powershell:
    script: |
      # Create default AppLocker policy
      $xml = '<AppLockerPolicy Version="1">' +
             '<RuleCollection Type="Exe" EnforcementMode="Enabled">' +
             '<FilePathRule Id="921cc481-6e17-4653-8f75-050b80acca20" Name="Allow Program Files" UserOrGroupSid="S-1-1-0" Action="Allow">' +
             '<Conditions><FilePathCondition Path="%PROGRAMFILES%\*" /></Conditions></FilePathRule>' +
             '<FilePathRule Id="a61c8b2c-a319-4cd0-9690-d2177cad7b51" Name="Allow Windows" UserOrGroupSid="S-1-1-0" Action="Allow">' +
             '<Conditions><FilePathCondition Path="%WINDIR%\*" /></Conditions></FilePathRule>' +
             '<FilePathRule Id="fd686d83-a829-4351-8ff4-27c7de5755d2" Name="Allow Administrators" UserOrGroupSid="S-1-5-32-544" Action="Allow">' +
             '<Conditions><FilePathCondition Path="*" /></Conditions></FilePathRule>' +
             '</RuleCollection></AppLockerPolicy>'
      $tempFile = "$env:TEMP\AppLockerPolicy.xml"
      Set-Content -Path $tempFile -Value $xml
      Set-AppLockerPolicy -XmlPolicy $tempFile
      Remove-Item $tempFile -Force
  when: windows_hardening_enable_applocker | bool
  tags:
    - nist_3.4.8

- name: Enable Attack Surface Reduction rules
  ansible.windows.win_powershell:
    script: |
      $asrRules = @{
        "BE9BA2D9-53EA-4CDC-84E5-9B1EEEE46550" = 1  # Block executable content from email
        "D4F940AB-401B-4EFC-AADC-AD5F3C50688A" = 1  # Block Office child processes
        "3B576869-A4EC-4529-8536-B80A7769E899" = 1  # Block Office executable content
        "75668C1F-73B5-4CF0-BB93-3ECF5CB7CC84" = 1  # Block Office code injection
        "D3E037E1-3EB8-44C8-A917-57927947596D" = 1  # Block JS/VBS launching executables
        "5BEB7EFE-FD9A-4556-801D-275E5FFC04CC" = 1  # Block obfuscated scripts
        "92E97FA1-2EDF-4476-BDD6-9DD0B4DDDC7B" = 1  # Block Win32 API calls from Office
      }

      foreach ($rule in $asrRules.GetEnumerator()) {
        Add-MpPreference -AttackSurfaceReductionRules_Ids $rule.Key -AttackSurfaceReductionRules_Actions $rule.Value
      }
  when: windows_hardening_enable_defender | bool
  tags:
    - nist_3.14.6
    - nist_3.14.7

- name: Enable controlled folder access
  ansible.windows.win_powershell:
    script: |
      Set-MpPreference -EnableControlledFolderAccess Enabled

      # Add protected folders
      @("$env:USERPROFILE\Documents", "$env:USERPROFILE\Desktop", "C:\Windows\System32\LogBackups") |
        Where-Object { Test-Path $_ } |
        ForEach-Object { Add-MpPreference -ControlledFolderAccessProtectedFolders $_ }
  when: windows_hardening_enable_defender | bool
  tags:
    - nist_3.14.6

- name: Check BitLocker availability
  ansible.windows.win_feature:
    name: BitLocker
    state: present
    include_sub_features: true
    include_management_tools: true
  when: windows_hardening_enable_bitlocker | bool
  register: bitlocker_feature
  tags:
    - nist_3.13.16

- name: Enable BitLocker on system drive
  ansible.windows.win_powershell:
    script: |
      $systemDrive = $env:SystemDrive
      $bitlockerStatus = Get-BitLockerVolume -MountPoint $systemDrive -ErrorAction SilentlyContinue

      if ($bitlockerStatus -and $bitlockerStatus.ProtectionStatus -eq 'On') {
        Write-Host "BitLocker already enabled on system drive"
        exit 0
      }

      # Enable BitLocker with TPM
      Enable-BitLocker -MountPoint $systemDrive -EncryptionMethod Aes256 -UsedSpaceOnly -TpmProtector

      # Add recovery password
      Add-BitLockerKeyProtector -MountPoint $systemDrive -RecoveryPasswordProtector

      # Start encryption
      Resume-BitLocker -MountPoint $systemDrive
  when:
    - windows_hardening_enable_bitlocker | bool
    - bitlocker_feature is succeeded
  register: bitlocker_result
  failed_when: false
  tags:
    - nist_3.13.16

- name: Configure exploit protection
  ansible.windows.win_powershell:
    script: |
      Set-ProcessMitigation -System -Enable DEP,SEHOP,CFG
  tags:
    - nist_3.14.2
