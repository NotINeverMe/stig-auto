# escape=`
ARG WINDOWS_VERSION=ltsc2022
FROM mcr.microsoft.com/windows/servercore:${WINDOWS_VERSION}

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Chocolatey
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; `
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Install dependencies with timeout and retry
RUN choco install -y git python3 --no-progress --timeout 300

# Install NuGet package provider first
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `
    Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force; `
    Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted

# Install PowerShell modules with optimized settings and timeout handling
RUN $ProgressPreference = 'SilentlyContinue'; `
    $ErrorActionPreference = 'Stop'; `
    Write-Host 'Installing PowerSTIG module (this may take several minutes)...'; `
    Install-Module -Name PowerSTIG -Force -AllowClobber -SkipPublisherCheck -Verbose:$false; `
    Write-Host 'Installing Pester module...'; `
    Install-Module -Name Pester -Force -SkipPublisherCheck -RequiredVersion 5.5.0 -Verbose:$false; `
    Write-Host 'Installing PSScriptAnalyzer module...'; `
    Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Verbose:$false; `
    Write-Host 'All PowerShell modules installed successfully'

# Create working directory
WORKDIR C:\stig-auto

# Copy repository files
COPY . .

# Set up Python environment with optimization
RUN $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine'); `
    Write-Host 'Setting up Python environment...'; `
    python --version; `
    python -m pip install --upgrade pip --no-warn-script-location; `
    python -m pip install 'ansible-core>=2.17,<2.18' pywinrm --no-warn-script-location --disable-pip-version-check; `
    Write-Host 'Python environment ready'

# Set environment variables
ENV STIG_PROFILE=windows2022
ENV PESTER_OUTPUT_DIRECTORY=C:\test-results

# Create test results directory
RUN New-Item -ItemType Directory -Force -Path C:\test-results

# Verify critical paths exist after COPY
RUN if (-not (Test-Path 'C:\stig-auto\docker\test-scripts\run-tests.ps1')) { `
        Write-Error "Test scripts not found at expected location"; `
        exit 1 `
    }

# Entry point for testing
ENTRYPOINT ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass"]
CMD ["-Command", "Write-Host 'Windows STIG Test Container Ready'"]